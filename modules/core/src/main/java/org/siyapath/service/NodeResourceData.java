/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.siyapath.service;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Contains information about a particular node
 */
public class NodeResourceData implements org.apache.thrift.TBase<NodeResourceData, NodeResourceData._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NodeResourceData");

  private static final org.apache.thrift.protocol.TField NODE_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeData", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField RESOURCE_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceLevel", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField NODE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeStatus", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new NodeResourceDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new NodeResourceDataTupleSchemeFactory());
  }

  public NodeData nodeData; // required
  /**
   * 
   * @see ResourceLevel
   */
  public ResourceLevel resourceLevel; // required
  /**
   * 
   * @see NodeStatus
   */
  public NodeStatus nodeStatus; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NODE_DATA((short)1, "nodeData"),
    /**
     * 
     * @see ResourceLevel
     */
    RESOURCE_LEVEL((short)2, "resourceLevel"),
    /**
     * 
     * @see NodeStatus
     */
    NODE_STATUS((short)3, "nodeStatus");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NODE_DATA
          return NODE_DATA;
        case 2: // RESOURCE_LEVEL
          return RESOURCE_LEVEL;
        case 3: // NODE_STATUS
          return NODE_STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NODE_DATA, new org.apache.thrift.meta_data.FieldMetaData("nodeData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NodeData.class)));
    tmpMap.put(_Fields.RESOURCE_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("resourceLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ResourceLevel.class)));
    tmpMap.put(_Fields.NODE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("nodeStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, NodeStatus.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NodeResourceData.class, metaDataMap);
  }

  public NodeResourceData() {
  }

  public NodeResourceData(
    NodeData nodeData,
    ResourceLevel resourceLevel,
    NodeStatus nodeStatus)
  {
    this();
    this.nodeData = nodeData;
    this.resourceLevel = resourceLevel;
    this.nodeStatus = nodeStatus;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NodeResourceData(NodeResourceData other) {
    if (other.isSetNodeData()) {
      this.nodeData = new NodeData(other.nodeData);
    }
    if (other.isSetResourceLevel()) {
      this.resourceLevel = other.resourceLevel;
    }
    if (other.isSetNodeStatus()) {
      this.nodeStatus = other.nodeStatus;
    }
  }

  public NodeResourceData deepCopy() {
    return new NodeResourceData(this);
  }

  @Override
  public void clear() {
    this.nodeData = null;
    this.resourceLevel = null;
    this.nodeStatus = null;
  }

  public NodeData getNodeData() {
    return this.nodeData;
  }

  public NodeResourceData setNodeData(NodeData nodeData) {
    this.nodeData = nodeData;
    return this;
  }

  public void unsetNodeData() {
    this.nodeData = null;
  }

  /** Returns true if field nodeData is set (has been assigned a value) and false otherwise */
  public boolean isSetNodeData() {
    return this.nodeData != null;
  }

  public void setNodeDataIsSet(boolean value) {
    if (!value) {
      this.nodeData = null;
    }
  }

  /**
   * 
   * @see ResourceLevel
   */
  public ResourceLevel getResourceLevel() {
    return this.resourceLevel;
  }

  /**
   * 
   * @see ResourceLevel
   */
  public NodeResourceData setResourceLevel(ResourceLevel resourceLevel) {
    this.resourceLevel = resourceLevel;
    return this;
  }

  public void unsetResourceLevel() {
    this.resourceLevel = null;
  }

  /** Returns true if field resourceLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetResourceLevel() {
    return this.resourceLevel != null;
  }

  public void setResourceLevelIsSet(boolean value) {
    if (!value) {
      this.resourceLevel = null;
    }
  }

  /**
   * 
   * @see NodeStatus
   */
  public NodeStatus getNodeStatus() {
    return this.nodeStatus;
  }

  /**
   * 
   * @see NodeStatus
   */
  public NodeResourceData setNodeStatus(NodeStatus nodeStatus) {
    this.nodeStatus = nodeStatus;
    return this;
  }

  public void unsetNodeStatus() {
    this.nodeStatus = null;
  }

  /** Returns true if field nodeStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetNodeStatus() {
    return this.nodeStatus != null;
  }

  public void setNodeStatusIsSet(boolean value) {
    if (!value) {
      this.nodeStatus = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NODE_DATA:
      if (value == null) {
        unsetNodeData();
      } else {
        setNodeData((NodeData)value);
      }
      break;

    case RESOURCE_LEVEL:
      if (value == null) {
        unsetResourceLevel();
      } else {
        setResourceLevel((ResourceLevel)value);
      }
      break;

    case NODE_STATUS:
      if (value == null) {
        unsetNodeStatus();
      } else {
        setNodeStatus((NodeStatus)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NODE_DATA:
      return getNodeData();

    case RESOURCE_LEVEL:
      return getResourceLevel();

    case NODE_STATUS:
      return getNodeStatus();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NODE_DATA:
      return isSetNodeData();
    case RESOURCE_LEVEL:
      return isSetResourceLevel();
    case NODE_STATUS:
      return isSetNodeStatus();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof NodeResourceData)
      return this.equals((NodeResourceData)that);
    return false;
  }

  public boolean equals(NodeResourceData that) {
    if (that == null)
      return false;

    boolean this_present_nodeData = true && this.isSetNodeData();
    boolean that_present_nodeData = true && that.isSetNodeData();
    if (this_present_nodeData || that_present_nodeData) {
      if (!(this_present_nodeData && that_present_nodeData))
        return false;
      if (!this.nodeData.equals(that.nodeData))
        return false;
    }

    boolean this_present_resourceLevel = true && this.isSetResourceLevel();
    boolean that_present_resourceLevel = true && that.isSetResourceLevel();
    if (this_present_resourceLevel || that_present_resourceLevel) {
      if (!(this_present_resourceLevel && that_present_resourceLevel))
        return false;
      if (!this.resourceLevel.equals(that.resourceLevel))
        return false;
    }

    boolean this_present_nodeStatus = true && this.isSetNodeStatus();
    boolean that_present_nodeStatus = true && that.isSetNodeStatus();
    if (this_present_nodeStatus || that_present_nodeStatus) {
      if (!(this_present_nodeStatus && that_present_nodeStatus))
        return false;
      if (!this.nodeStatus.equals(that.nodeStatus))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_nodeData = true && (isSetNodeData());
    builder.append(present_nodeData);
    if (present_nodeData)
      builder.append(nodeData);

    boolean present_resourceLevel = true && (isSetResourceLevel());
    builder.append(present_resourceLevel);
    if (present_resourceLevel)
      builder.append(resourceLevel.getValue());

    boolean present_nodeStatus = true && (isSetNodeStatus());
    builder.append(present_nodeStatus);
    if (present_nodeStatus)
      builder.append(nodeStatus.getValue());

    return builder.toHashCode();
  }

  public int compareTo(NodeResourceData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    NodeResourceData typedOther = (NodeResourceData)other;

    lastComparison = Boolean.valueOf(isSetNodeData()).compareTo(typedOther.isSetNodeData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodeData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeData, typedOther.nodeData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResourceLevel()).compareTo(typedOther.isSetResourceLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResourceLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceLevel, typedOther.resourceLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNodeStatus()).compareTo(typedOther.isSetNodeStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodeStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeStatus, typedOther.nodeStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("NodeResourceData(");
    boolean first = true;

    sb.append("nodeData:");
    if (this.nodeData == null) {
      sb.append("null");
    } else {
      sb.append(this.nodeData);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("resourceLevel:");
    if (this.resourceLevel == null) {
      sb.append("null");
    } else {
      sb.append(this.resourceLevel);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nodeStatus:");
    if (this.nodeStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.nodeStatus);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NodeResourceDataStandardSchemeFactory implements SchemeFactory {
    public NodeResourceDataStandardScheme getScheme() {
      return new NodeResourceDataStandardScheme();
    }
  }

  private static class NodeResourceDataStandardScheme extends StandardScheme<NodeResourceData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NodeResourceData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NODE_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.nodeData = new NodeData();
              struct.nodeData.read(iprot);
              struct.setNodeDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RESOURCE_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.resourceLevel = ResourceLevel.findByValue(iprot.readI32());
              struct.setResourceLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NODE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nodeStatus = NodeStatus.findByValue(iprot.readI32());
              struct.setNodeStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NodeResourceData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.nodeData != null) {
        oprot.writeFieldBegin(NODE_DATA_FIELD_DESC);
        struct.nodeData.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.resourceLevel != null) {
        oprot.writeFieldBegin(RESOURCE_LEVEL_FIELD_DESC);
        oprot.writeI32(struct.resourceLevel.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.nodeStatus != null) {
        oprot.writeFieldBegin(NODE_STATUS_FIELD_DESC);
        oprot.writeI32(struct.nodeStatus.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NodeResourceDataTupleSchemeFactory implements SchemeFactory {
    public NodeResourceDataTupleScheme getScheme() {
      return new NodeResourceDataTupleScheme();
    }
  }

  private static class NodeResourceDataTupleScheme extends TupleScheme<NodeResourceData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, NodeResourceData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetNodeData()) {
        optionals.set(0);
      }
      if (struct.isSetResourceLevel()) {
        optionals.set(1);
      }
      if (struct.isSetNodeStatus()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetNodeData()) {
        struct.nodeData.write(oprot);
      }
      if (struct.isSetResourceLevel()) {
        oprot.writeI32(struct.resourceLevel.getValue());
      }
      if (struct.isSetNodeStatus()) {
        oprot.writeI32(struct.nodeStatus.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, NodeResourceData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.nodeData = new NodeData();
        struct.nodeData.read(iprot);
        struct.setNodeDataIsSet(true);
      }
      if (incoming.get(1)) {
        struct.resourceLevel = ResourceLevel.findByValue(iprot.readI32());
        struct.setResourceLevelIsSet(true);
      }
      if (incoming.get(2)) {
        struct.nodeStatus = NodeStatus.findByValue(iprot.readI32());
        struct.setNodeStatusIsSet(true);
      }
    }
  }

}

